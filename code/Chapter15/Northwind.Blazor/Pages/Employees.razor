@attribute [RenderModeServer]
@page "/employees/{country?}"
@inject IHttpClientFactory httpClientFactory
@*@inject LocalStorageService localStorage*@
<h3>
  Employees @(string.IsNullOrWhiteSpace(Country) ? "Worldwide" : "in " + Country)
</h3>

<QuickGrid Items="@employees" Class="table table-striped table-bordered">
  <PropertyColumn Property="@(emp => emp.EmployeeId)" Sortable="true" Title="ID" />
  <PropertyColumn Property="@(emp => emp.FirstName)" Sortable="true" />
  <PropertyColumn Property="@(emp => emp.LastName)" Sortable="true" />
  <PropertyColumn Property="@(emp => emp.City)" Sortable="true" />
  <PropertyColumn Property="@(emp => emp.Country)" Sortable="true" />
  <PropertyColumn Property="@(emp => emp.HireDate)"
                  Format="yyyy-MM-dd" Sortable="true" />
</QuickGrid>

@code {
  /*
  private const string keyTS = "employeesLastGet";
  private const string keyData = "employeesArray";

  [Parameter]
  public TimeSpan CacheDuration { get; set; } = TimeSpan.FromMinutes(10);
  */

  [Parameter]
  public string? Country { get; set; }

  // QuickGrid works best if it binds to an IQueryable<T> sequence.
  private IQueryable<Employee>? employees;

  protected override async Task OnParametersSetAsync()
  {
    //string employeesJson = "{}";
    Employee[]? employeesArray = null;

    // Employee entity has circular reference to itself so
    // we must control how references are handled.
    JsonSerializerOptions jsonOptions = new()
      {
        ReferenceHandler = ReferenceHandler.Preserve,
        PropertyNameCaseInsensitive = true
      };

    /*
    string lastGetText = await localStorage.GetValueAsync(keyTS);

    bool isDate = DateTime.TryParse(lastGetText, out DateTime lastGet);
    
    if ((isDate) && (lastGet.Add(CacheDuration) >= DateTime.UtcNow))
    {
      employeesJson = await localStorage.GetValueAsync(keyData);
    }
    else
    {
      */
      // refresh the employees from the web service

      HttpClient client = httpClientFactory.CreateClient(
        "Northwind.Blazor.Service");

      string path = "api/employees";

      try
      {
      employeesArray = (await client.GetFromJsonAsync<Employee[]?>(
        path, jsonOptions));

        /*
        employeesJson = await client.GetStringAsync(path);

        await localStorage.SetValueAsync(keyData, employeesJson);
        await localStorage.SetValueAsync(keyTS, DateTime.UtcNow.ToString());
        */
      }
      catch (Exception ex)
      {
        Console.WriteLine($"{ex.GetType()}: {ex.Message}");
      }
    //}

    /*
    try
    {
      employeesArray = JsonSerializer.Deserialize<Employee[]?>(
        employeesJson, jsonOptions);
    }
    catch (Exception ex)
    {
      Console.WriteLine($"{ex.GetType()}: {ex.Message}");
    }
    */

    if (employeesArray is not null)
    {
      employees = employeesArray.AsQueryable();

      if (!string.IsNullOrWhiteSpace(Country))
      {
        employees = employees.Where(emp => emp.Country == Country);
      }
    }
  }
}
